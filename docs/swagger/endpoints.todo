// An item represented by ({item}) needs to be passed in the body
// Apart from login, register, reset, send_email_verification all endpoints are protected by a token
// Base extention: https://marketplace.visualstudio.com/items?itemName=blunt1337.todo-language
// x   <=> done
// o   <=> ongoing
// !   <=> blocked
// ' ' <=> not started
// -   <=> Canceled
// ?   <=> question to ask

Swagger | Implementation | postman present | Functional tests | Description

// (Admin)
[ ][ ][x][ ] POST /stop //Stop the server

// User
[ ][x][x][ ] PUT /register //Register a user
[ ][x][x][ ] POST /login //Log the user
[ ][x][x][ ] POST /send_email_verification //Get the email of the user to reset the password
[ ][x][x][ ] POST /reset_password //Reset the password
[ ][ ][x][ ] POST /update_user/({profile_data}) // Update the user profile
[ ][ ][x][ ] POST /update_user_favicon/{type}/({data}) // Update user profile photo
[ ][ ][x][ ] GET /get_user_id // Get the id of the user profile
[ ][ ][x][ ] DELETE /delete_user_favicon // Remove user favicon
[ ][ ][x][ ] POST /logout // Sign out an user
[ ][ ][x][ ] DELETE /delete_user // Delete an user
[ ][ ][x][ ] GET /oauth/login/({provider_name}) //Get the authorisation url based on the sso provider.
[ ][ ][x][ ] POST /oauth/callback //The callback endpoint for sso auths.

// Applets
[ ][ ][x][ ] PUT /add_applet/{name}/({trigger}, {tags})  //Add a trigger to an applet
[ ][ ][x][ ] PUT /add_node/{id}/({action}) // Add an action to the applet
[ ][ ][x][ ] GET /get_applet_id/{name} // Get the id of a given applet
[ ][ ][x][ ] GET /get_trigger_id/{applet_id}/{trigger_name} // Get the id of the trigger
[ ][ ][x][ ] GET /get_node_id/{applet_id}/{node_name} // Get the id of the action
[ ][ ][x][ ] POST /update_applet/{id}/{new_name}/({new_trigger}) // Update the trigger
[ ][ ][x][ ] POST /update_node/{id}/({new_action}) // Update an action to the applet
[ ][ ][x][ ] DELETE /delete_applet/{id} // Delete the applet and all it's actions
[ ][ ][x][ ] DELETE /delete_node/{id}/{node_id} // Delete an action from the applet
[ ][ ][x][ ] GET /get_applets // Get all the existing applets
[ ][ ][x][ ] GET /get_user_applets // Get all the applets belonging to a user
[ ][ ][x][ ] GET /get_applet/{name/id} // Get the details of an applet
[ ][ ][x][ ] GET /get_applets_by_tag/({tags}) // Get all applets corresponding to a given tag
[ ][ ][x][ ] GET /get_recent_applets // Get all the recent applets
[ ][ ][x][ ] POST /connect_applet/{id} // Connect a user to an applet
[ ][ ][x][ ] POST /disconnect_applet/{id} // Disconnect a user from an applet
[ ][ ][x][ ] POST /update_applet_favicon/{id}/{type}/({data}) // Update applet favicon
[ ][ ][x][ ] DELETE /delete_applet_favicon/{id} // Remove applet favicon

// Services
[ ][ ][x][ ] GET /get_services // Get all services
[ ][ ][x][ ] GET /get_service/{name} // Get the details of a service
[ ][ ][x][ ] GET /get_services_by_tag/{tag} // Get all services corresponding to a given tag
[ ][ ][x][ ] GET /get_recent_services // Get all the recent services

// Services management (admin)
[ ][ ][x][ ] PUT /add_service/({name}, {url}, {token}, {category}, {type}, {tag}) // Add a service -> id of the service
[ ][ ][x][ ] POST /update_service/{service_id}/({name}, {url}, {token}, {category}, {type}, {tag}) // Update a service
[ ][ ][x][ ] GET /get_service_id/{name/url} // Get the id of an existing service wether it is by it's name or url
[ ][ ][x][ ] DELETE /delete_service/{id} // Delete a service and all it's applets
[ ][ ][x][ ] POST /update_service_favicon/{id}/{type}/({data}) // Update service favicon
[ ][ ][x][ ] DELETE /delete_service_favicon/{id} // Remove service favicon
