name: run_unit_tests

# version: 1.0.3.commando
# Version log:
  # 1.0.0: Initial version
  # 1.0.1: Add the xvfb library to the actions for any graphical environements
  # 1.0.2: Put the test in a docker container
  # 1.0.3.commando: This is a standalone version of the workflow that has been edited specifically for this project

on:
    push:
        branches:
        - main
        - dev
        - dev-workflows-unit-tests
    workflow_dispatch:

env:
  BUCKET_IMAGE_NAME: terarea-minio
  BUCKET_CONTAINER_NAME: t-minio
  DATABASE_IMAGE_NAME: terarea-mariadb
  DATABASE_CONTAINER_NAME: t-mariadb
  SERVER_IMAGE_NAME: terarea-server
  SERVER_CONTAINER_NAME: t-server
  CLIENT_WEB_IMAGE_NAME: terarea-web
  CLIENT_WEB_CONTAINER_NAME: t-web
  CLIENT_MOBILE_IMAGE_NAME: terarea-mobile
  CLIENT_MOBILE_CONTAINER_NAME: t-mobile
  DOCKER_NETWORK: t-network
  DOCKER_VOLUME: t-volume

jobs:

  run_tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create environement files
        run: |
          echo "pwd = $(pwd)"
          echo "Github content:"
          ls -a -R
          cd app/back/db
          echo "${{secrets.DATABASE_ENVIRONEMENT}}" > .env
          cd ../s3
          echo "${{secrets.BUCKET_ENVIRONEMENT}}" > .env
          cd ../server
          echo "${{secrets.BACK_ENVIRONEMENT}}" > .env
          cd ../../front/mobile
          echo "${{secrets.FRONT_MOBILE_ENVIRONEMENT}}" > .env
          cd ../front/web
          echo "${{secrets.FRONT_WEB_ENVIRONEMENT}}" > .env

      - name: Create docker network
        run: |
          docker network create ${{env.DOCKER_NETWORK}}

      - name: Create docker volume
        run: |
          docker volume create ${{env.DOCKER_VOLUME}}

      - name: Build s3 bucket
        run: |
          cd app/back/s3
          docker build -t ${{env.BUCKET_IMAGE_NAME}} .

      - name: Build database
        run: |
          cd app/back/db
          docker build -t ${{env.DATABASE_IMAGE_NAME}} .

      - name: Build server
        run: |
          cd app/back/server
          docker build -t ${{env.SERVER_IMAGE_NAME}} .

      - name: Build front web
        run: |
          cd app/front/web
          docker build -t ${{env.CLIENT_WEB_IMAGE_NAME}} .

      - name: Build front mobile
        run: |
          cd app/front/mobile
          docker build -t ${{env.CLIENT_MOBILE_IMAGE_NAME}} .

      - name: Start the docker compose
        run: |
          docker compose up -d

      - name: Install netcat into the root to check connection status
        run: |
          RUN_COMMAND="apt update && echo 'Installing netcat' && apt install -y netcat"
          docker exec -t ${{env.SERVER_CONTAINER_NAME}} /bin/bash -c "$RUN_COMMAND"

      - name: Check for database connection
        run: |
          CONTAINER_NAME="db_connection_tester"
          DB_HOST="maria-db"
          DB_PORT=3306
          DELAY=5
          RUN_COMMAND="nc -z -v -w $DELAY $DB_HOST $DB_PORT"

          MAX_RETRIES=10 # Maximum retry count
          RETRY_COUNT=0
          until docker exec -t ${{env.SERVER_CONTAINER_NAME}} /bin/bash -c "$RUN_COMMAND"; do
              RETRY_COUNT=$((RETRY_COUNT+1))
              if [ $RETRY_COUNT -ge $MAX_RETRIES ]; then
                echo "Max retries reached, could not connect to the database."
                exit 1
              fi
              echo "Waiting for the database to be ready... ($RETRY_COUNT/$MAX_RETRIES)"
              sleep 5
          done
          echo "Database connection established."


      - name: Show running containers
        run: |
          echo "Listing running containers"
          docker ps

      - name: Run server tests
        run: |
          TEST_RUN_COMMAND="pwd && ls -Ra && pytest -s"
          docker exec -t ${{env.SERVER_CONTAINER_NAME}} /bin/bash -c "$TEST_RUN_COMMAND"
          
      - name: Run tests client mobile
        run: |
          TEST_RUN_COMMAND="echo 'hi'"
          docker exec -t ${{env.CLIENT_MOBILE_CONTAINER_NAME}} /bin/bash -c "$TEST_RUN_COMMAND"

      - name: Run tests client web
        run: |
          TEST_RUN_COMMAND="echo 'hi'"
          docker exec -t ${{env.CLIENT_WEB_CONTAINER_NAME}} /bin/bash -c "$TEST_RUN_COMMAND"
      
      - name: Stop the docker compose
        run: |
          docker compose down

      - name: Clean ressources
        run: |
          docker system prune -f
      